

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Andy's Den</title>
  <subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle>
  <updated>2022-12-11T14:46:02+08:00</updated>
  <author>
    <name>王方帅 (andy)</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2022 王方帅 (andy) </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>iOS网络层设计二-缓存方案深入</title>
    <link href="http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%BA%8C-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88%E6%B7%B1%E5%85%A5/" rel="alternate" type="text/html" title="iOS网络层设计二-缓存方案深入" />
    <published>2022-12-07T20:30:00+08:00</published>
  
    <updated>2022-12-08T22:08:39+08:00</updated>
  
    <id>http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%BA%8C-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88%E6%B7%B1%E5%85%A5/</id>
    <content src="http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%BA%8C-%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88%E6%B7%B1%E5%85%A5/" />
    <author>
      <name>andy</name>
    </author>

  
    
    <category term="iOS架构" />
    
  

  
    <summary>
      





      1. YYCache分析
 1. 优点：

  1. 内部支持数据库存储、文件存储、或混合存储。

  2. 使用LRU算法，最久未被使用的优先清除，以缓存总个数、缓存总开销、是否过期三个维度进行清理。

 2. 缺点：

  1. 是否过期这个维度不是根据写入时间去做的判断，而是根据访问时间，一次访问将更新刷新缓存时间，依此为基础再重新开始算过期时长

  2. 所以，更加适合的是图片这种只要url一致则图片永远不会发生变更的场景。对于网络层缓存这种场景来说，很可能经常使用的缓存一直不过期，一直无法加载最新网络数据。

2. NSURLCache分析



 1. 缺点：

  1. 只能缓存get请求，post请求不能缓存。

  2. 不够灵活，只能设置一个缓存总文件夹，不能分别指定每个文件缓存的位置。

  3. 苹果没有公开其内部实现的缓存策略是LRU还是别的，所以在超过缓...
    </summary>
  

  </entry>

  
  <entry>
    <title>iOS网络层设计一-架构设计</title>
    <link href="http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%B8%80-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/" rel="alternate" type="text/html" title="iOS网络层设计一-架构设计" />
    <published>2022-12-01T20:30:00+08:00</published>
  
    <updated>2022-12-01T20:30:00+08:00</updated>
  
    <id>http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%B8%80-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <content src="http://localhost:4000/posts/iOS%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E8%AE%A1%E4%B8%80-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/" />
    <author>
      <name>andy</name>
    </author>

  
    
    <category term="iOS架构" />
    
  

  
    <summary>
      





      一、我认为，一个设计合理的网络层应支持以下方面：

1. 应该支持缓存（三方框架：hyperoslo/Cache）

 1. 使用缓存有以下优点：使用缓存可以降低服务器的压力，更快速的响应用户的请求，提升用户体验。

  1. 对于很长时间都不会有变化的接口来说，可以设置一个时效性，在时效性之内使用缓存，当然这个时效性要通知到客服及Cloud人员，以便支持用户需求。localOrRemote

  2. 对于一些场景可以支持先显示缓存再加载远端，远端返回后覆盖缓存，比如点击微信朋友圈就是先显示的缓存然后去发起请求。localThenRemote

  3. 对于一些场景可以支持先加载远端，远端失败才显示缓存。（总体来说返回用户失败不如返回缓存用户更友好）remoteThenLocal

  4. 对于一些有很高时效性的场景可以不使用缓存，直接加载远端数据。remote

 2. 对于...
    </summary>
  

  </entry>

</feed>


